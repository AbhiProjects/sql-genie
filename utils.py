import os
import requests
import json

# Check if the OPEN_API_KEY environment variable is set
if not os.getenv('OPEN_API_KEY', ''):
    print('OPEN API Key not set. No response would be generated by the BOT')

def generate_sql_query(query):
    """
    Generates an SQL query using OpenAI's API.
    It sends a query request to OpenAI's completion endpoint and retrieves the response.
    """
    try:
        result = ''

        url = "https://api.openai.com/v1/chat/completions"

        headers = {
            'Authorization': f'Bearer {os.getenv('OPEN_API_KEY', '')}',
            'Content-Type': 'application/json'
        }

        payload = {
            "model": "gpt-4o-mini",
            "n": 1,
            "logprobs": False,
            "messages":[
                {"role": "system", "content": "You are an assistant that only responds with SQL queries, without explanations, comments, or additional text and also quotes. Needs to be in plain text"},
                {"role": "user", "content": f"Convert this to SQL: {query}"}
            ]
        }
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()

        data = response.json()

        # Get the choices from the response and extract the content
        choices = data.get('choices', [])
        if choices:
            result = choices[0].get('message', {}).get('content', '')

    except Exception as e:
        raise

    return result

def generate_llm_response(query):
    """
    Wrapper function that generates the LLM response by calling generate_sql_query.
    """
    llm_response = generate_sql_query(query)
    return llm_response